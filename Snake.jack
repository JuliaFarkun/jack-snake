class Snake {
    static Field gameField;
    field SnakePart tail, head;
    field int orientation; // Поворот головы 
    // 0 - вправо, 1 - вниз, 2 - влево, 3 - вверх
    field int score; // длина змеи и счёт 

    constructor Snake new(Field currentField, Cell cell) {
        let gameField = currentField;
        let tail = SnakePart.new(cell);
        let head = tail;
        let orientation = 0;
        let score = 0;
        return this;
    }

    method void turnRight() {
        if (orientation = 2) {
            return;
        }
        let orientation = 0;
        return;
    }

    method void turnDawn() {
        if (orientation = 3) {
            return;
        }
        let orientation = 1;
        return;
    }

    method void turnLeft() {
        if (orientation = 0) {
            return;
        }
        let orientation = 2;
        return;
    }

    method void turnUp() {
        if (orientation = 1) {
            return;
        }
        let orientation = 3;
        return;
    }

    method int move() {
        var int increase, nextCellIndex;
        var SnakePart newHead, nextTail;
        var Cell curCell, newCell;
        
        let increase = 0;
        let curCell = head.getCell();

        if (orientation = 0) {
            let nextCellIndex = Field.getRight(curCell.getHash());
        } 
        if (orientation = 1) {
            let nextCellIndex = Field.getDown(curCell.getHash());
        } 
        if (orientation = 2) {
            let nextCellIndex = Field.getLeft(curCell.getHash());
        } 
        if (orientation = 3) {
            let nextCellIndex = Field.getUp(curCell.getHash());
        } 

        if (nextCellIndex = (-1)) {
            return -1;
        }

        let newCell = gameField.getCell(nextCellIndex);
        if (newCell.getType() = 1) {
            return -1;
        }
        if (newCell.getType() = 2) {
            let increase = 1;
        }

        let newHead = SnakePart.new(newCell);
        do head.setNext(newHead);
        let head = newHead;

        if (increase = 0) {
            let curCell = tail.getCell();
            do curCell.setType(0);
            let nextTail = tail.getNext();
            do tail.dispose();
            let tail = nextTail;
        } else {
            do gameField.createApple();
            let score = score + 1;
            do Output.moveCursor(0, 8);
            do Output.printInt(score);
        }

        return 1;
    }

    method void dispose() {
        var SnakePart next;
        while (~(tail.getNext() = null)) {
            let next = tail.getNext();
            do tail.dispose();
            let tail = next;
        }
        do Memory.deAlloc(this);
        return;
    }
}